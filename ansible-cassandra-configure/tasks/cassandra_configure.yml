---

- name: Set concurrent writes.
  shell: nbcoeur=$(cat /proc/cpuinfo | grep processor | wc -l) && echo $(($nbcoeur * 8))
  register: cassandra_concurrent_writes
  changed_when: False

- name: Set concurrent writes fact
  set_fact: cassandra_concurrent_writes="{{ cassandra_concurrent_writes.stdout }}"

- name: Set prod interface
  set_fact: cassandra_interface_prod="ansible_{{ cassandra_interface}}"

- name: Check if a template has already been upload
  lineinfile: dest="{{ cassandra_conf_file }}" line="cluster_name{{ ':' }} '{{ cassandra_cluster_name  }}'" state=present
  register: cassandra_stop_cluster

- name: Stop Cassandra cluster
  service: name=cassandra state=stopped
  when: cassandra_stop_cluster|changed

- name: Update Cassandra configuration file.
  template: src="cassandra_conf_{{ cassandra_version_min }}.tpl" dest="{{ cassandra_conf_file }}"
  when: not cassandra_add_admin_user|bool

- name: Update Cassandra configuration file.
  template: src="cassandra_conf_{{ cassandra_version_min }}_auth.tpl" dest="{{ cassandra_conf_file }}"
  when: cassandra_add_admin_user|bool

- name: Update Cassandra environnement file.
  template: src="cassandra_env_{{ cassandra_version_min }}.tpl" dest="{{ cassandra_env_file }}"

- name: Update logrotate Cassandra
  template: src="cassandra_logrotate_conf.tpl" dest="{{ cassandra_logrotate_file }}"

- name: Reset all data files
  shell: rm -rf {{ cassandra_datadir  }}/*
  #file: path={{ cassandra_datadir  }}/* state=absent
  when: cassandra_stop_cluster|changed

#- name: Reset all log files
#  shell: rm -rf /var/log/cassandra/*
  #file: path=/var/log/cassandra/* state=absent
#  when: cassandra_stop_cluster|changed
